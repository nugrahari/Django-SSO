version: "3"

services:
  django_svc1:
    build:
      context: $PWD/Service1/.
      dockerfile: Dockerfile
    container_name: django_svc1
    restart: always
    command: gunicorn settings.wsgi:application --bind 0.0.0.0:8000 --workers 3
    expose:
      - "8000"
    ports: # Tambahkan port untuk grpc jika diperlukan
      - "8000:8000"
    volumes:
      - $PWD/Service1:/app
    environment:
      - DJANGO_SETTINGS_MODULE=settings.settings
    networks:
      - backend_dev

  grpc:
    build: # Menggunakan build yang sama seperti service django
      context: $PWD/Service1/.
      dockerfile: Dockerfile
    container_name: grpc_server
    restart: always
    command: python manage.py run_grpc_server
    expose:
      - "50051"
    ports: # Tambahkan port untuk grpc jika diperlukan
      - "50051:50051"
    depends_on:
      - django_svc1
    networks:
      - backend_dev

  django_svc2:
    build:
      context: $PWD/Service2/.
      dockerfile: Dockerfile
    container_name: django_svc2
    restart: always
    command: gunicorn settings.wsgi:application --bind 0.0.0.0:8001 --workers 3
    expose:
      - "8001"
    ports: # Tambahkan port untuk grpc jika diperlukan
      - "8001:8001"
    volumes:
      - $PWD/Service2:/app
    environment:
      - DJANGO_SETTINGS_MODULE=settings.settings
    networks:
      - backend_dev

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    restart: always
    ports:
      - "80:80"
      - "802:802"
      - "443:443"
    volumes:
      - $PWD/nginx/nginx.conf:/etc/nginx/nginx.conf
      - $PWD/nginx/config:/etc/nginx/config
    depends_on:
      - django_svc1
      # - grpc
    networks:
      - backend_dev

networks:
  backend_dev:
    driver: bridge
